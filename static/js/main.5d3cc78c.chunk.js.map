{"version":3,"sources":["config.js","chatbot.js","App.js","serviceWorker.js","index.js"],"names":["firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Chatbot","props","state","chatBotNumber","chatContent","value","userName","lastTimeFocus","handleChangeName","bind","handleChange","handleSubmit","handleKeyDown","handleFocus","firebase","apps","length","this","firebaseApp","initializeApp","config","database","ref","limitToLast","on","e","setState","val","Object","keys","timestamp","localStorage","getItem","document","title","event","target","preventDefault","sendMessege","key","dt","Date","push","content","time","getFullYear","parseInt","getMonth","getDate","getHours","getMinutes","setItem","timestampNow","now","getSeconds","user","contentUser","chatbot","map","className","isUser","type","onChange","onKeyPress","onFocus","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5d3cc78c.chunk.js","sourcesContent":["const firebaseConfig = {\n  apiKey: \"AIzaSyB_kBV5b09S5SWwz7-f73EcpWtzNX9mCo4\",\n  authDomain: \"tsmc-chatbot.firebaseapp.com\",\n  databaseURL: \"https://tsmc-chatbot.firebaseio.com\",\n  projectId: \"tsmc-chatbot\",\n  storageBucket: \"tsmc-chatbot.appspot.com\",\n  messagingSenderId: \"518091462698\",\n  appId: \"1:518091462698:web:21bd8b0eb89cfea4800b53\"\n};\n\nexport default firebaseConfig;","import React from 'react';\nimport './App.css';\nimport firebase from 'firebase';\nimport config from './config';\n\nclass Chatbot extends React.Component{\n  constructor(props) {\n    super(props);\n\n    this.state={\n      chatBotNumber: 25,\n      chatContent: {},\n      value: '',\n      userName: '',\n      lastTimeFocus: '',\n    }\n\n    this.handleChangeName = this.handleChangeName.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleFocus = this.handleFocus.bind(this);\n  }\n\n  componentDidMount() {\n    if (!firebase.apps.length) {\n      this.firebaseApp = firebase.initializeApp(config);\n      this.database = this.firebaseApp.database();\n\n      this.database.ref('/Test').limitToLast(this.state.chatBotNumber).on(\"value\", e => {\n        this.setState({\n          chatContent: e.val(),\n          lastTimeFocus: e.val()[Object.keys(e.val())[this.state.chatBotNumber-1]].timestamp\n        },function(){\n          let lastTimeRead = localStorage.getItem(\"lastTimeFocus\");\n\n          if(lastTimeRead < this.state.lastTimeFocus){\n            document.title=\"(*) notification\";\n          }  \n        });\n      });\n    }\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleChangeName(event) {\n    this.setState({userName: event.target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    if(this.state.value !== \"\" && this.state.value !== \"\") {\n      this.sendMessege();\n    }\n  }\n\n  handleKeyDown(event) {\n    if(event.key === 'Enter' && this.state.value !== \"\") {\n      var dt = new Date();\n      this.firebaseApp.database().ref('/Test').push({\n        content:this.state.value,\n        time: dt.getFullYear() + '/'\n            + (parseInt(dt.getMonth())+1) + '/'\n            + dt.getDate() + '-'\n            + dt.getHours() + ':'\n            + dt.getMinutes(),\n      });\n      this.setState({value: ''});\n      this.sendMessege();      \n    }\n  }\n\n  handleFocus(event) {\n    localStorage.setItem('lastTimeFocus', this.state.lastTimeFocus);\n    document.title=\"LEEMI\";\n  }\n\n  sendMessege() {\n    let timestampNow = Date.now();\n    var dt = new Date();\n    this.firebaseApp.database().ref('/Test').push({\n      content:this.state.userName + ': ' + this.state.value,\n      time: dt.getFullYear() + '/'\n          + (parseInt(dt.getMonth())+1) + '/'\n          + dt.getDate() + '-'\n          + dt.getHours() + ':'\n          + dt.getMinutes() + ':'\n          + dt.getSeconds(),\n      timestamp: timestampNow,\n      user: this.state.userName\n    });\n    localStorage.setItem('lastTimeFocus', timestampNow);\n    this.setState({value: ''});\n  }\n\n  isUser(contentUser) {\n    if(contentUser === this.state.userName) {\n      return 'contentRight';\n    } else {\n      return 'contentLeft';\n    }\n  }\n\n  render(){\n    let chatbot = Object.keys(this.state.chatContent).map(key => \n      <p value={key} className={this.isUser(this.state.chatContent[key].user)}>\n        {this.state.chatContent[key].content}\n        <span className=\"chatTime\">\n          {this.state.chatContent[key].time}\n        </span>\n      </p>\n    )\n\n    return (\n      <div className=\"App\">\n        <div className=\"chatContentBox\">\n          {chatbot}\n        </div>      \n        <div className=\"chatSubmitBox\">\n          <input type=\"text\" value={this.state.userName} onChange={this.handleChangeName} />\n          <input type=\"text\" value={this.state.value}\n            onChange={this.handleChange}\n            onKeyPress={this.handleKeyDown}\n            onFocus={this.handleFocus}\n          />\n          <input type=\"submit\" value=\"Submit\" onClick={this.handleSubmit}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Chatbot;","import React from 'react';\nimport './App.css';\nimport Chatbot from './chatbot';\n\nexport default class App extends React.Component{\n  constructor(props) {\n    super(props);\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Chatbot/>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}