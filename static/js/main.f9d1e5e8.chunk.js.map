{"version":3,"sources":["config.js","chatbot.js","App.js","serviceWorker.js","index.js"],"names":["firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Chatbot","props","state","chatContent","value","handleChange","bind","handleSubmit","handleKeyDown","firebase","apps","length","this","firebaseApp","initializeApp","config","database","ref","limitToLast","on","e","setState","val","event","target","preventDefault","push","key","dt","Date","content","time","getFullYear","parseInt","getMonth","getDate","getHours","getMinutes","chatbot","Object","keys","map","className","type","onChange","onKeyPress","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oTAUeA,EAVQ,CACrBC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,6CCwEMC,E,kDAzEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAM,CACTC,YAAa,GACbC,MAAO,IAET,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBATJ,E,gEAYE,IAAD,OAEbG,IAASC,KAAKC,SACjBC,KAAKC,YAAcJ,IAASK,cAAcC,GAC1CH,KAAKI,SAAWJ,KAAKC,YAAYG,WAEjCJ,KAAKI,SAASC,IAAI,SAASC,YAAY,IAAIC,GAAG,SAAS,SAAAC,GACrD,EAAKC,SAAS,CAAElB,YAAaiB,EAAEE,c,mCAKxBC,GACXX,KAAKS,SAAS,CAACjB,MAAOmB,EAAMC,OAAOpB,U,mCAGxBmB,GACXA,EAAME,iBACkB,KAArBb,KAAKV,MAAME,OAAqC,KAArBQ,KAAKV,MAAME,QACvCQ,KAAKC,YAAYG,WAAWC,IAAI,SAASS,KAAKd,KAAKV,MAAME,OACzDQ,KAAKS,SAAS,CAACjB,MAAO,Q,oCAIZmB,GACZ,GAAiB,UAAdA,EAAMI,KAAwC,KAArBf,KAAKV,MAAME,MAAc,CACnD,IAAIwB,EAAK,IAAIC,KACbjB,KAAKC,YAAYG,WAAWC,IAAI,SAASS,KAAK,CAC5CI,QAAQlB,KAAKV,MAAME,MACnB2B,KAAMH,EAAGI,cAAgB,KAClBC,SAASL,EAAGM,YAAY,GAAK,IAC9BN,EAAGO,UAAY,IACfP,EAAGQ,WAAa,IAChBR,EAAGS,eAEXzB,KAAKS,SAAS,CAACjB,MAAO,Q,+BAIjB,IAAD,OACFkC,EAAUC,OAAOC,KAAK5B,KAAKV,MAAMC,aAAasC,KAAI,SAAAd,GAAG,OACvD,uBAAGvB,MAAOuB,GACP,EAAKzB,MAAMC,YAAYwB,GAAKG,QAC5B,EAAK5B,MAAMC,YAAYwB,GAAKI,SAIjC,OACE,yBAAKW,UAAU,OACb,yBAAKA,UAAU,gBACZJ,GAEH,yBAAKI,UAAU,cACb,2BAAOC,KAAK,OAAOvC,MAAOQ,KAAKV,MAAME,MAAOwC,SAAUhC,KAAKP,aAAewC,WAAYjC,KAAKJ,gBAC3F,2BAAOmC,KAAK,SAASvC,MAAM,SAAS0C,QAASlC,KAAKL,qB,GAnEtCwC,IAAMC,WCDPC,E,kDACnB,WAAYhD,GAAQ,uCACZA,G,qDAIN,OACE,yBAAKyC,UAAU,OACb,kBAAC,EAAD,W,GARyBK,IAAMC,WCQnBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f9d1e5e8.chunk.js","sourcesContent":["const firebaseConfig = {\n  apiKey: \"AIzaSyB_kBV5b09S5SWwz7-f73EcpWtzNX9mCo4\",\n  authDomain: \"tsmc-chatbot.firebaseapp.com\",\n  databaseURL: \"https://tsmc-chatbot.firebaseio.com\",\n  projectId: \"tsmc-chatbot\",\n  storageBucket: \"tsmc-chatbot.appspot.com\",\n  messagingSenderId: \"518091462698\",\n  appId: \"1:518091462698:web:21bd8b0eb89cfea4800b53\"\n};\n\nexport default firebaseConfig;","import React from 'react';\nimport './App.css';\nimport firebase from 'firebase';\nimport config from './config';\n\nclass Chatbot extends React.Component{\n  constructor(props) {\n    super(props);\n\n    this.state={\n      chatContent: {},\n      value: '',\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n\n  componentDidMount() {\n    let chatbotLists = [];\n    if (!firebase.apps.length) {\n      this.firebaseApp = firebase.initializeApp(config);\n      this.database = this.firebaseApp.database();\n\n      this.database.ref('/Test').limitToLast(20).on(\"value\", e => {\n        this.setState({ chatContent: e.val() });\n      });\n    }\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    if(this.state.value !== \"\" && this.state.value !== \"\") {\n      this.firebaseApp.database().ref('/Test').push(this.state.value);\n      this.setState({value: ''});\n    }\n  }\n\n  handleKeyDown(event) {\n    if(event.key === 'Enter' && this.state.value !== \"\") {\n      var dt = new Date();\n      this.firebaseApp.database().ref('/Test').push({\n        content:this.state.value,\n        time: dt.getFullYear() + '/'\n            + (parseInt(dt.getMonth())+1) + '/'\n            + dt.getDate() + '-'\n            + dt.getHours() + ':'\n            + dt.getMinutes(),\n      });\n      this.setState({value: ''});\n    }\n  }\n\n  render(){\n    let chatbot = Object.keys(this.state.chatContent).map(key => \n      <p value={key}>\n        {this.state.chatContent[key].content}\n        {this.state.chatContent[key].time}\n      </p>\n    )\n\n    return (\n      <div className=\"App\">\n        <div className=\"contentBlock\">\n          {chatbot}\n        </div>\n        <div className=\"inputBlock\">\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange}  onKeyPress={this.handleKeyDown}/>\n          <input type=\"submit\" value=\"Submit\" onClick={this.handleSubmit}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Chatbot;\n","import React from 'react';\nimport './App.css';\nimport Chatbot from './chatbot';\n\nexport default class App extends React.Component{\n  constructor(props) {\n    super(props);\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Chatbot/>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}